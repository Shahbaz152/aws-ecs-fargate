version: 0.2

env:
  variables:
    AWS_REGION: "us-east-1"
    ECR_REPO_NAME: "ecswithpipeline"
    CONTAINER_NAME: "apache-cicd"

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 471101288063.dkr.ecr.$AWS_REGION.amazonaws.com

  build:
    commands:
      - IMAGE_URI="471101288063.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest"
      - docker build -t $ECR_REPO_NAME .
      - docker tag $ECR_REPO_NAME:latest $IMAGE_URI

  post_build:
    commands:
      - docker push $IMAGE_URI
      # Create artifacts in a dedicated directory
      - mkdir -p codedeploy
      - echo '[{"name":"'"$CONTAINER_NAME"'","imageUri":"'"$IMAGE_URI"'"}]' > codedeploy/imagedefinitions.json
      - |
        cat <<EOF > codedeploy/taskdef.json
        {
          "family": "mytask",
          "executionRoleArn": "arn:aws:iam::471101288063:role/ecsTaskExecutionRole",
          "networkMode": "awsvpc",
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "<IMAGE_URI>",
              "portMappings": [{"containerPort": 5000}],
              "essential": true
            }
          ],
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "1024",
          "memory": "3072"
        }
        EOF
      - cp appspec.yaml codedeploy/
      # Verify files
      - echo "Artifacts directory contents:"
      - ls -la codedeploy/
      - echo "imagedefinitions.json content:"
      - cat codedeploy/imagedefinitions.json

artifacts:
  files:
    - codedeploy/**/*
  base-directory: codedeploy
  discard-paths: no
